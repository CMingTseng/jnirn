com.natpryce.approvals.ApprovalError -> a:
    java.io.File approvedFile -> a
    java.lang.String approvedContents -> b
    java.io.File receivedFile -> c
    java.lang.String receivedContents -> d
com.natpryce.approvals.Approver -> b:
    java.io.File approvedFile -> a
    java.io.File receivedFile -> b
    void check(java.lang.String) -> a
    void recordAsApproved(java.lang.String) -> b
com.natpryce.approvals.IO -> c:
    java.lang.String readContents(java.io.File) -> a
    void writeContents(java.io.File,java.lang.String) -> a
com.natpryce.approvals.junit.ApprovalFailure -> d:
    java.io.File approvedFile -> a
    java.lang.String approvedContents -> b
    java.io.File receivedFile -> c
    java.lang.String receivedContents -> d
com.natpryce.approvals.junit.ApprovalRule -> e:
    java.io.File srcDir -> a
    com.natpryce.approvals.Approver approver -> b
    void check(java.lang.String) -> a
    void recordAsApproved(java.lang.String) -> b
    com.natpryce.approvals.Approver approver() -> a
    org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description) -> a
    java.io.File testFile(java.io.File,org.junit.runner.Description,java.lang.String) -> a
com.natpryce.jnirn.examples.AClassWithOverloadedNativeMethods -> f:
    void nativeMethod() -> a
    void nativeMethod(int,int) -> a
    void nativeMethod(java.lang.String) -> a
    void nativeMethod(java.lang.String,java.lang.String) -> a
    void nativeMethod(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> a
    void native_Method_With_Underscores() -> b
    void native_Method_With_Underscores(int,int) -> b
    void native_Method_With_Underscores(java.lang.String,java.lang.String) -> b
com.natpryce.jnirn.examples.AbstractClassWithNoNativeMethods -> g:
    void thisIsNotNative() -> a
com.natpryce.jnirn.examples.AnotherClassWithNativeMethods -> h:
    int nativeMethodOne() -> a
    int nativeMethodTwo() -> b
    com.natpryce.jnirn.examples.AnotherClassWithNativeMethods$RetClass nativeMethodThree(com.natpryce.jnirn.examples.AnotherClassWithNativeMethods$ArgClass) -> a
com.natpryce.jnirn.examples.AnotherClassWithNativeMethods$ArgClass -> i:
com.natpryce.jnirn.examples.AnotherClassWithNativeMethods$RetClass -> j:
com.natpryce.jnirn.examples.ClassWithCallbackMethods -> k:
    void callbackA() -> a
    void callbackB() -> b
    void callbackC(com.natpryce.jnirn.examples.ClassWithCallbackMethods$MyClass) -> a
com.natpryce.jnirn.examples.ClassWithCallbackMethods$MyClass -> l:
com.natpryce.jnirn.examples.ClassWithNativeAndCallbackMethods -> m:
    void nativeMethod() -> a
    void calledFromNativeCode() -> b
com.natpryce.jnirn.examples.ClassWithNativeMethods -> n:
    void simpleStatic() -> a
    void simpleNonStatic() -> b
    void method_With_Underscores() -> c
    java.lang.String methodWithParametersAndResult(int,java.math.BigInteger) -> a
com.natpryce.jnirn.examples.ClassWithNoNativeMethods -> o:
    void thisIsNotNative() -> a
    void thisIsNotNativeEither() -> b
com.natpryce.jnirn.examples.NativeCallback -> p:
com.natpryce.jnirn.noproguard.JNIRegisterNativesTest -> q:
    org.junit.rules.TestName testName -> a
    org.junit.contrib.java.lang.system.StandardOutputStreamLog stdout -> b
    com.natpryce.approvals.junit.ApprovalRule approval -> c
    void generatesCCodeToRegisterNativeMethods() -> a
    void canGenerateHeaderDeclaringFunctionToRegisterNativeMethods() -> b
    void generatesGlobalVariablesThatReferToMethodsInvokedFromNativeCode() -> c
    void canSpecifyNameOfFunctionThatRegistersNativeMethods() -> d
    void generatesDependencyRules() -> e
    void cannotGenerateMakefileDependenciesIfOutputFileNameNotSpecified() -> f
    void reportsUsage() -> g
    java.io.File fileNameForTest(java.lang.String) -> a
com.natpryce.jnirn.proguard.ClassMethodMapperTest -> r:
    java.util.List nothing -> a
    com.natpryce.jnirn.proguard.MethodMaker maker -> b
    com.natpryce.jnirn.proguard.Obfuscation obfuscation -> c
    void setUp() -> a
    void mappingMethodWithNoParameters() -> b
    void mappingMethodWithJavaLangParameters() -> c
    void mappingMethodWithMappedParameters() -> d
    void mappingMethodWithMappedParametersAndReturnValuesWithArrays() -> e
com.natpryce.jnirn.proguard.JNIRegisterNativesProguardTest -> s:
    org.junit.rules.TestName testName -> a
    org.junit.contrib.java.lang.system.StandardOutputStreamLog stdout -> b
    com.natpryce.approvals.junit.ApprovalRule approval -> c
    java.io.File proguardMapFile -> d
    void generatesCCodeToRegisterNativeMethods() -> a
    void canGenerateHeaderDeclaringFunctionToRegisterNativeMethods() -> b
    void generatesGlobalVariablesThatReferToMethodsInvokedFromNativeCode() -> c
    void canSpecifyNameOfFunctionThatRegistersNativeMethods() -> d
    void generatesDependencyRules() -> e
    void cannotGenerateMakefileDependenciesIfOutputFileNameNotSpecified() -> f
    void reportsUsage() -> g
    java.io.File fileNameForTest(java.lang.String) -> a
com.natpryce.jnirn.proguard.JavaTypeConverterTest -> t:
    com.natpryce.jnirn.proguard.JavaTypeConverter converter -> a
    void testBasicTypes() -> a
    void testStandardJavaTypes() -> b
    void testSomeClassThatWeCantActuallyLoad() -> c
    void testBasicArrayType() -> d
    void testClassArrayType() -> e
com.natpryce.jnirn.proguard.MapFileParserTest -> u:
    java.util.Map parsed -> a
    void readTheMapFile() -> a
    void testCanParseClassesFromAMapFile() -> b
    void testIncludesClassesEvenWhenTheHaveNoFieldsOrMethods() -> c
com.natpryce.jnirn.proguard.MethodMakerTest -> v:
    java.util.List NO -> a
    com.natpryce.jnirn.proguard.MethodMaker methodMaker -> b
    void testConvertVoidNoArg() -> a
    void testConvertPrimitiveSinglePrimitiveArg() -> b
    void testConvertSomethingABitMoreComplicated() -> c
    org.objectweb.asm.commons.Method descriptor(java.lang.String,java.lang.String,java.util.List) -> a
