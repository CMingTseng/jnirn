/* GENERATED CODE - DO NOT EDIT */

#include <jni.h>
#include "com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods.h"
#include "com_natpryce_jnirn_examples_AnotherClassWithNativeMethods.h"
#include "com_natpryce_jnirn_examples_ClassWithNativeAndCallbackMethods.h"
#include "com_natpryce_jnirn_examples_ClassWithNativeMethods.h"

typedef void (*NativesErrorCallback)(void *client_context, const char *class_name, const char *method_name, const char *method_signature);

static const JNINativeMethod method_table_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods[] = {
   {"nativeMethod", "()V", Java_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods_nativeMethod__},
   {"nativeMethod", "(II)V", Java_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods_nativeMethod__II},
   {"nativeMethod", "(Ljava/lang/String;)V", Java_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods_nativeMethod__Ljava_lang_String_2},
   {"nativeMethod", "(Ljava/lang/String;Ljava/lang/String;)V", Java_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods_nativeMethod__Ljava_lang_String_2Ljava_lang_String_2},
   {"nativeMethod", "(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;)V", Java_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods_nativeMethod__Ljava_math_BigInteger_2Ljava_math_BigInteger_2Ljava_math_BigInteger_2},
   {"native_Method_With_Underscores", "()V", Java_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods_native_1Method_1With_1Underscores__},
   {"native_Method_With_Underscores", "(II)V", Java_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods_native_1Method_1With_1Underscores__II},
   {"native_Method_With_Underscores", "(Ljava/lang/String;Ljava/lang/String;)V", Java_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods_native_1Method_1With_1Underscores__Ljava_lang_String_2Ljava_lang_String_2}
};
static const JNINativeMethod method_table_com_natpryce_jnirn_examples_AnotherClassWithNativeMethods[] = {
   {"nativeMethodOne", "()I", Java_com_natpryce_jnirn_examples_AnotherClassWithNativeMethods_nativeMethodOne},
   {"nativeMethodTwo", "()I", Java_com_natpryce_jnirn_examples_AnotherClassWithNativeMethods_nativeMethodTwo}
};
static const JNINativeMethod method_table_com_natpryce_jnirn_examples_ClassWithNativeAndCallbackMethods[] = {
   {"nativeMethod", "()V", Java_com_natpryce_jnirn_examples_ClassWithNativeAndCallbackMethods_nativeMethod}
};
static const JNINativeMethod method_table_com_natpryce_jnirn_examples_ClassWithNativeMethods[] = {
   {"simpleStatic", "()V", Java_com_natpryce_jnirn_examples_ClassWithNativeMethods_simpleStatic},
   {"simpleNonStatic", "()V", Java_com_natpryce_jnirn_examples_ClassWithNativeMethods_simpleNonStatic},
   {"method_With_Underscores", "()V", Java_com_natpryce_jnirn_examples_ClassWithNativeMethods_method_1With_1Underscores},
   {"methodWithParametersAndResult", "(ILjava/math/BigInteger;)Ljava/lang/String;", Java_com_natpryce_jnirn_examples_ClassWithNativeMethods_methodWithParametersAndResult}
};

struct registration { const char * class_name; const JNINativeMethod *methods; int method_count; };
static const struct registration registrations[] = {
    {"com/natpryce/jnirn/examples/AClassWithOverloadedNativeMethods", method_table_com_natpryce_jnirn_examples_AClassWithOverloadedNativeMethods, 8},
    {"com/natpryce/jnirn/examples/AnotherClassWithNativeMethods", method_table_com_natpryce_jnirn_examples_AnotherClassWithNativeMethods, 2},
    {"com/natpryce/jnirn/examples/ClassWithNativeAndCallbackMethods", method_table_com_natpryce_jnirn_examples_ClassWithNativeAndCallbackMethods, 1},
    {"com/natpryce/jnirn/examples/ClassWithNativeMethods", method_table_com_natpryce_jnirn_examples_ClassWithNativeMethods, 4},
};

jclass Natives_class_com_natpryce_jnirn_examples_ClassWithCallbackMethods;
jclass Natives_class_com_natpryce_jnirn_examples_ClassWithNativeAndCallbackMethods;

jmethodID Natives_method_com_natpryce_jnirn_examples_ClassWithCallbackMethods__callbackA;
jmethodID Natives_method_com_natpryce_jnirn_examples_ClassWithCallbackMethods__callbackB;
jmethodID Natives_method_com_natpryce_jnirn_examples_ClassWithNativeAndCallbackMethods__calledFromNativeCode;

struct method_ref { const char *name; const char *signature; jmethodID *method_id_p; };
struct class_ref { const char *name; jobject *global_ref_p; int method_count; const struct method_ref* methods; };

static const struct class_ref referenced_classes[] = {
    { "com/natpryce/jnirn/examples/ClassWithCallbackMethods", &Natives_class_com_natpryce_jnirn_examples_ClassWithCallbackMethods, 2,
        (struct method_ref[]) {
            { "callbackA", "()V", &Natives_method_com_natpryce_jnirn_examples_ClassWithCallbackMethods__callbackA },
            { "callbackB", "()V", &Natives_method_com_natpryce_jnirn_examples_ClassWithCallbackMethods__callbackB },
        },
    },
    { "com/natpryce/jnirn/examples/ClassWithNativeAndCallbackMethods", &Natives_class_com_natpryce_jnirn_examples_ClassWithNativeAndCallbackMethods, 1,
        (struct method_ref[]) {
            { "calledFromNativeCode", "()V", &Natives_method_com_natpryce_jnirn_examples_ClassWithNativeAndCallbackMethods__calledFromNativeCode },
        },
    },
};

int NativesInit(JNIEnv *env, NativesErrorCallback error_callback, void *client_context) {
    jclass the_class;
    jint status;
    int i, j;

    for (i = 0; i < 4; i++) {
        the_class = (*env)->FindClass(env, registrations[i].class_name);
        if (the_class == NULL) {
            error_callback(client_context, registrations[i].class_name, NULL, NULL);
            return -1;
        }
        for (j = 0; j < registrations[i].method_count; j++) {
            const JNINativeMethod *method = &registrations[i].methods[j];
            status = (*env)->RegisterNatives(env, the_class, method, 1);
            if (status < 0) {
                error_callback(client_context, registrations[i].class_name, method->name, method->signature);
                return -1;
            }
        }
    }

    for (i = 0; i < 2; i++) {
        the_class = (*env)->FindClass(env, referenced_classes[i].name);
        if (the_class == NULL) return -1;
        *(referenced_classes[i].global_ref_p) = (*env)->NewGlobalRef(env, the_class);
        if (*(referenced_classes[i].global_ref_p) == NULL) return -1;
        for (j = 0; j < referenced_classes[i].method_count; j++) {
            *(referenced_classes[i].methods[j].method_id_p) = (*env)->GetStaticMethodID(env, the_class, referenced_classes[i].methods[j].name, referenced_classes[i].methods[j].signature);
            if(*(referenced_classes[i].methods[j].method_id_p) == NULL) return -1;
        }
    }

    return 0;
}
